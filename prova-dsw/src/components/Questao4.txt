Hooks são importantes por um motivo: ajudam a não ter de "reinventar a roda" a cada projeto, isto é: trabalho repetitivo. Seu padrão para nomenclatura de arquivo é "useNomedaFuncaoQueDesempenhara".

Alguns deles vêm por padrão no acervo do React e outros são disponibilizados publicamente pela comunidade dele. O desenvolvedor pode, também, criar seus próprios hooks, a fim de minimizar códigos repetidos e melhorar o seu fluxo de trabalho.

Um exemplo de hook que vem por padrão é o useState, que mudará o valor de uma variável com base no set da mesma variável quando uma determinada condição for satisfeita, ou seja: manter e atualizar um estado interno.
Também há o useEffect, que cuidará para que certos códigos sejam executados apenas quando uma determinada dependência for modificada.
Há, ainda, o useContext, que é uma forma de evitar que uma cadeia imensa de passagem de props seja criada: ele possibilita que uma mesma variável ou estado seja visível por praticamente toda a aplicação.

Um exemplo de hook personalizado: supondo que vários componentes precisem puxar informações do banco de dados, o desenvolvedor pode criar um "useFetch" a fim de não precisar sempre estruturar as mesmas requisições, trazendo as informações relevantes do resultado por meio de um objeto chamado "data".